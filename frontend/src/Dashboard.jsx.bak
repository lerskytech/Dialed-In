import React, { useState, useEffect, useMemo } from 'react';
import Select from 'react-select';
import { useAuth } from './AuthContext';

function Dashboard() {
  const { getAuthHeaders, token } = useAuth();

  const [filterCategory, setFilterCategory] = useState('');
  const [filterValueTier, setFilterValueTier] = useState('');
  const [filterRating, setFilterRating] = useState('');
  const [filterCity, setFilterCity] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  const [sortBy, setSortBy] = useState('name');
  const [sortOrder, setSortOrder] = useState('asc');
  const [selectedLocations, setSelectedLocations] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [city, setCity] = useState('');
  const [category, setCategory] = useState('');
  const [maxLeads, setMaxLeads] = useState(25);
  const [leads, setLeads] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searching, setSearching] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  const locationOptions = [
    { value: 'Miami, FL', label: 'Miami, FL', county: 'Miami-Dade County', areaCode: '305' },
    { value: 'Orlando, FL', label: 'Orlando, FL', county: 'Orange County', areaCode: '407' },
    { value: 'Tampa, FL', label: 'Tampa, FL', county: 'Hillsborough County', areaCode: '813' },
    { value: 'Jacksonville, FL', label: 'Jacksonville, FL', county: 'Duval County', areaCode: '904' },
    { value: 'Palm Beach County, FL', label: 'Palm Beach County, FL', county: 'Palm Beach County', areaCode: '561' },
    { value: 'Broward County, FL', label: 'Broward County, FL', county: 'Broward County', areaCode: '954' },
    { value: 'Treasure Coast, FL', label: 'Treasure Coast, FL', county: 'St. Lucie County', areaCode: '772' },
    { value: 'Atlanta, GA', label: 'Atlanta, GA', county: 'Fulton County', areaCode: '404' },
    { value: 'Houston, TX', label: 'Houston, TX', county: 'Harris County', areaCode: '713' },
    { value: 'Dallas, TX', label: 'Dallas, TX', county: 'Dallas County', areaCode: '214' },
    { value: 'Asheville, NC', label: 'Asheville, NC', county: 'Buncombe County', areaCode: '828' },
    { value: 'Nashville, TN', label: 'Nashville, TN', county: 'Davidson County', areaCode: '615' },
    { value: 'Charleston, SC', label: 'Charleston, SC', county: 'Charleston County', areaCode: '843' },
    { value: 'Virginia Beach, VA', label: 'Virginia Beach, VA', county: 'Virginia Beach City', areaCode: '757' },
    { value: 'Charlotte, NC', label: 'Charlotte, NC', county: 'Mecklenburg County', areaCode: '704' },
    { value: 'Raleigh, NC', label: 'Raleigh, NC', county: 'Wake County', areaCode: '919' },
    { value: 'Greenville, SC', label: 'Greenville, SC', county: 'Greenville County', areaCode: '864' },
    { value: 'Honolulu, HI', label: 'Honolulu, HI', county: 'Honolulu County', areaCode: '808' },
    { value: 'Seattle, WA', label: 'Seattle, WA', county: 'King County', areaCode: '206' },
    { value: 'Portland, OR', label: 'Portland, OR', county: 'Multnomah County', areaCode: '503' },
    { value: 'Los Angeles, CA', label: 'Los Angeles, CA', county: 'Los Angeles County', areaCode: '213' },
    { value: 'San Francisco, CA', label: 'San Francisco, CA', county: 'San Francisco County', areaCode: '415' },
    { value: 'Salt Lake City, UT', label: 'Salt Lake City, UT', county: 'Salt Lake County', areaCode: '801' },
    { value: 'Denver, CO', label: 'Denver, CO', county: 'Denver County', areaCode: '303' },
    { value: 'Boulder, CO', label: 'Boulder, CO', county: 'Boulder County', areaCode: '303' },
    { value: 'Colorado Springs, CO', label: 'Colorado Springs, CO', county: 'El Paso County', areaCode: '719' },
    { value: 'Traverse City, MI', label: 'Traverse City, MI', county: 'Grand Traverse County', areaCode: '231' }
  ];

  const categoryOptions = [
    { value: 'HVAC', label: 'HVAC & Air Conditioning' },
    { value: 'Plumbing', label: 'Plumbing Services' },
    { value: 'Electrical', label: 'Electrical Services' },
    { value: 'Roofing', label: 'Roofing & Repair' },
    { value: 'Event Planner', label: 'Event Planners' },
    { value: 'Garage Door Repair', label: 'Garage Door Repair Companies' },
    { value: 'Pest Control', label: 'Pest Control Services' },
    { value: 'Pool Cleaning', label: 'Pool Cleaning & Maintenance' },
    { value: 'Hair Salon', label: 'Hair Salons' },
    { value: 'Boutique', label: 'Boutiques' },
    { value: 'Barber', label: 'Barber Shops' },
    { value: 'Plastic Surgeon', label: 'Plastic Surgeons' },
    { value: 'Massage Therapist', label: 'Massage Therapists' },
    { value: 'Real Estate Agent', label: 'Real Estate Agents' },
    { value: 'Chiropractor', label: 'Chiropractors' },
    { value: 'Dermatologist', label: 'Dermatologists' },
    { value: 'Financial Advisor', label: 'Financial Advisors' },
    { value: 'Private Tutor', label: 'Private Tutors' },
    { value: 'Auto Repair', label: 'Auto Repair' },
    { value: 'Family Law Attorney', label: 'Family Law Attorneys' },
    { value: 'Immigration Attorney', label: 'Immigration Attorneys' },
    { value: 'Personal Injury Attorney', label: 'Personal Injury Attorneys' },
    { value: 'Personal Trainer', label: 'Personal Trainers' },
    { value: 'Landscaping', label: 'Landscaping Services' },
    { value: 'Spa', label: 'Spas' },
    { value: 'Psychic', label: 'Psychics' },
    { value: 'Lounge', label: 'Lounges' },
    { value: 'Catering', label: 'Catering Services' }
  ];

  const loadLeads = async () => {
    try {
      setLoading(true);
      const response = await fetch('http://localhost:3001/api/leads', {
        headers: getAuthHeaders()
      });
      if (response.ok) {
        const data = await response.json();
        setLeads(data);
      } else {
        console.error('Failed to load leads:', response.status);
      }
    } catch (err) {
      console.error('Error loading leads:', err);
    } finally {
      setLoading(false);
    }
  };

  const updateLeadStatus = async (leadId, status) => {
    try {
      const response = await fetch(`http://localhost:3001/api/leads/${leadId}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json', ...getAuthHeaders() },
        body: JSON.stringify({ status })
      });
      if (response.ok) {
        setLeads(prevLeads => prevLeads.map(lead => lead.id === leadId ? { ...lead, status } : lead));
      } else {
        console.error('Failed to update lead status:', response.status);
      }
    } catch (error) {
      console.error('Error updating lead status:', error);
    }
  };

  const updateLeadNotes = async (leadId, notes) => {
    try {
      const response = await fetch(`http://localhost:3001/api/leads/${leadId}/notes`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json', ...getAuthHeaders() },
        body: JSON.stringify({ notes })
      });
      if (response.ok) {
        setLeads(prevLeads => prevLeads.map(lead => lead.id === leadId ? { ...lead, notes } : lead));
      } else {
        console.error('Failed to update lead notes:', response.status);
      }
    } catch (error) {
      console.error('Error updating lead notes:', error);
    }
  };

  useEffect(() => { loadLeads(); }, []);

  const filteredAndSortedLeads = useMemo(() => {
    let filtered = [...leads];
    if (filterCategory) filtered = filtered.filter(lead => lead.category === filterCategory);
    if (filterValueTier) filtered = filtered.filter(lead => lead.valueTier === filterValueTier);
    if (filterRating) filtered = filtered.filter(lead => lead.rating && lead.rating >= parseFloat(filterRating));
    if (filterCity) filtered = filtered.filter(lead => lead.city === filterCity);
    if (filterStatus) filtered = filtered.filter(lead => (lead.status || 'uncalled') === filterStatus);
    
    filtered.sort((a, b) => {
      let aValue, bValue;
      switch (sortBy) {
        case 'rating': aValue = a.rating || 0; bValue = b.rating || 0; break;
        case 'valueTier': const tierOrder = { 'Premium': 4, 'High': 3, 'Medium': 2, 'Standard': 1 }; aValue = tierOrder[a.valueTier] || 0; bValue = tierOrder[b.valueTier] || 0; break;
        case 'city': aValue = a.city || ''; bValue = b.city || ''; break;
        case 'createdAt': aValue = new Date(a.createdAt || 0).getTime(); bValue = new Date(b.createdAt || 0).getTime(); break;
        default: aValue = a.name || ''; bValue = b.name || '';
      }
      if (typeof aValue === 'string') return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
      return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
    });
    return filtered;
  }, [leads, filterCategory, filterValueTier, filterRating, filterCity, filterStatus, sortBy, sortOrder]);

  
  const downloadCSV = () => {
    if (leads.length === 0) return setError('No leads to download');
    const csvContent = "data:text/csv;charset=utf-8," + "Name,Rating,Reviews,Address,Phone,Email,Website,Value Score,Value Tier,Status,Notes,Contributed By\n" + leads.map(l => `\"${l.name}\",${l.rating},${l.reviewCount},\"${l.address}\",\"${l.phone || ''}\",\"${l.email || ''}\",\"${l.website || ''}\",${l.valueScore},\"${l.valueTier}\",\"${l.status || 'uncalled'}\",\"${l.notes || ''}\",\"${l.contributedBy}\"`).join("\n");
    const link = document.createElement("a");
    link.setAttribute("href", encodeURI(csvContent));
    link.setAttribute("download", "spreeleads_leads.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    setSuccess(`Downloaded ${leads.length} leads as CSV`);
  };

  const clearAllLeads = async () => {
    if (!window.confirm('Are you sure you want to delete all leads? This cannot be undone.')) return;
    try {
      const response = await fetch('http://localhost:3001/api/leads/clear', {
        method: 'DELETE',
        headers: getAuthHeaders()
      });
      if (response.ok) {
        setLeads([]);
        setSuccess('All leads have been deleted.');
      } else {
        setError('Failed to delete leads.');
      }
    } catch (err) {
      setError('Failed to connect to the server.');
    }
  };

  const downloadJSON = () => {
    if (leads.length === 0) return setError('No leads to download');
    const jsonContent = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(leads, null, 2));
    const link = document.createElement("a");
    link.setAttribute("href", jsonContent);
    link.setAttribute("download", "spreeleads_leads.json");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    setSuccess(`Downloaded ${leads.length} leads as JSON`);
  };

    const toggleCategorySelection = (categoryValue) => setSelectedCategories(prev => prev.includes(categoryValue) ? prev.filter(c => c !== categoryValue) : [...prev, categoryValue]);

  const customStyles = {
    control: (provided) => ({
      ...provided,
      backgroundColor: '#334155',
      borderColor: '#475569',
      color: 'white',
    }),
    menu: (provided) => ({
      ...provided,
      backgroundColor: '#1e293b',
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isFocused ? '#475569' : '#1e293b',
      color: 'white',
    }),
    multiValue: (provided) => ({
      ...provided,
      backgroundColor: '#2563eb',
    }),
    multiValueLabel: (provided) => ({
      ...provided,
      color: 'white',
    }),
    multiValueRemove: (provided) => ({
      ...provided,
      color: 'white',
      ':hover': {
        backgroundColor: '#1d4ed8',
        color: 'white',
      },
    }),
    singleValue: (provided) => ({
        ...provided,
        color: 'white',
    }),
  };

  const handleSearch = async () => {
    const citiesToSearch = selectedLocations.map(loc => loc.value);
    const categoriesToSearch = selectedCategories.length > 0 ? selectedCategories : (category ? [category] : []);
    if (citiesToSearch.length === 0 || categoriesToSearch.length === 0) return setError('Please select at least one city and one category');
    try {
      setSearching(true); setError(null); setSuccess(null);
      const apiKey = localStorage.getItem(`spreeleads-api-key-${token}`);
      const response = await fetch('http://localhost:3001/api/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', ...getAuthHeaders() },
        body: JSON.stringify({ cities: citiesToSearch, categories: categoriesToSearch, maxLeads, userApiKey: apiKey })
      });
      if (!response.ok) throw new Error('Search failed');
      const result = await response.json();
      const newCount = result.newLeads || result.data.length;
      const totalFound = result.totalFound || result.data.length;
      setSuccess(newCount === totalFound ? `Found ${newCount} new leads!` : `Found ${newCount} new leads (${totalFound - newCount} were duplicates)`);
      setTimeout(() => loadLeads(), 100);
    } catch (err) {
      console.error('Search error:', err);
      setError('Search failed. Please try again.');
    } finally {
      setSearching(false);
    }
  };

  return (
    <main className="container mx-auto px-4 py-8">
      <div className="bg-slate-800/90 border border-slate-600 rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          <div className="sm:col-span-2">
            <label className="block text-sm font-medium text-gray-300 mb-2">Locations</label>
            <Select
              isMulti
              options={locationOptions}
              value={selectedLocations}
              onChange={setSelectedLocations}
              styles={customStyles}
              placeholder="Search by city, county, or area code..."
              filterOption={(option, rawInput) => {
                const input = rawInput.toLowerCase();
                return (
                  option.label.toLowerCase().includes(input) ||
                  (option.county && option.county.toLowerCase().includes(input)) ||
                  (option.areaCode && option.areaCode.includes(input))
                );
              }}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">Categories (Multi-Select)</label>
            {selectedCategories.length > 0 && (
              <div className="flex flex-wrap gap-1 mb-2">
                {selectedCategories.map(categoryValue => {
                  const categoryLabel = categoryOptions.find(opt => opt.value === categoryValue)?.label || categoryValue;
                  return (
                    <span key={categoryValue} className="bg-green-600 text-white px-2 py-1 rounded-full text-xs flex items-center gap-1">
                      {categoryLabel}
                      <button onClick={() => toggleCategorySelection(categoryValue)} className="hover:bg-green-700 rounded-full w-4 h-4 flex items-center justify-center">×</button>
                    </span>
                  );
                })}
              </div>
            )}
            <select value="" onChange={(e) => { if (e.target.value && !selectedCategories.includes(e.target.value)) { toggleCategorySelection(e.target.value); } }} className="w-full bg-slate-700 border border-slate-500 rounded-lg px-3 py-3 sm:py-2 text-white focus:border-blue-400 focus:outline-none touch-manipulation text-base sm:text-sm max-h-48 overflow-y-auto">
              <option value="">Add a category...</option>
              {categoryOptions.filter(option => !selectedCategories.includes(option.value)).map(option => <option key={option.value} value={option.value}>{option.label}</option>)}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">Max Leads</label>
            <select value={maxLeads} onChange={(e) => setMaxLeads(parseInt(e.target.value))} className="w-full bg-slate-700 border border-slate-500 rounded-lg px-3 py-3 sm:py-2 text-white focus:border-blue-400 focus:outline-none touch-manipulation text-base sm:text-sm">
              <option value={10}>10</option>
              <option value={25}>25</option>
              <option value={50}>50</option>
              <option value={100}>100</option>
              <option value={200}>200</option>
              <option value={500}>500</option>
              <option value={1000}>1000</option>
              <option value={2000}>2000</option>
            </select>
          </div>
          <div className="flex items-end sm:col-span-2 lg:col-span-1">
            <button onClick={handleSearch} disabled={searching || selectedLocations.length === 0 || (selectedCategories.length === 0 && !category)} className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-medium py-3 sm:py-2 px-4 rounded-lg transition-colors touch-manipulation text-base sm:text-sm">
              {searching ? 'Searching...' : 'Find New Leads'}
            </button>
          </div>
        </div>
        {error && <div className="bg-red-900/80 border border-red-600 text-red-200 px-4 py-2 rounded mb-4">{error}</div>}
        {success && <div className="bg-green-900/80 border border-green-600 text-green-200 px-4 py-2 rounded mb-4">{success}</div>}
      </div>

      <div className="bg-slate-800/90 border border-slate-600 rounded-lg p-4 sm:p-6 mb-4">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-3 gap-4 sm:gap-2">
          <h2 className="text-lg sm:text-xl font-bold text-white">Filtered Leads</h2>
          <div className="flex flex-col sm:flex-row gap-4">
            <button onClick={downloadCSV} className="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg text-sm">Download CSV</button>
            <button onClick={downloadJSON} className="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg text-sm">Download JSON</button>
            <button onClick={clearAllLeads} className="bg-red-800 hover:bg-red-900 text-white font-medium py-2 px-4 rounded-lg text-sm">Clear All Leads</button>
          </div>
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex items-center gap-2">
              <label htmlFor="sortBy" className="text-sm font-medium text-gray-300">Sort By:</label>
              <select id="sortBy" value={sortBy} onChange={(e) => setSortBy(e.target.value)} className="bg-slate-700 border-slate-600 rounded p-1 text-sm">
                <option value="name">Name</option>
                <option value="rating">Rating</option>
                <option value="valueTier">Value Tier</option>
                <option value="city">City</option>
                <option value="createdAt">Date Added</option>
              </select>
            </div>
            <div className="flex items-center gap-2">
              <label htmlFor="sortOrder" className="text-sm font-medium text-gray-300">Order:</label>
              <select id="sortOrder" value={sortOrder} onChange={(e) => setSortOrder(e.target.value)} className="bg-slate-700 border-slate-600 rounded p-1 text-sm">
                <option value="asc">Asc</option>
                <option value="desc">Desc</option>
              </select>
            </div>
          </div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-4">
          <Select
            isClearable
            options={locationOptions}
            value={locationOptions.find(opt => opt.value === filterCity)}
            onChange={option => setFilterCity(option ? option.value : '')}
            styles={customStyles}
            placeholder="Filter by city..."
          />
          <select value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full bg-slate-700 border border-slate-500 rounded-lg px-3 py-2 text-white focus:border-blue-400 focus:outline-none text-sm">
            <option value="">All Categories</option>
            {[...new Set(leads.map(l => l.category))].sort().map(cat => <option key={cat} value={cat}>{cat}</option>)}
          </select>
          <select value={filterValueTier} onChange={(e) => setFilterValueTier(e.target.value)} className="w-full bg-slate-700 border border-slate-500 rounded-lg px-3 py-2 text-white focus:border-blue-400 focus:outline-none text-sm">
            <option value="">All Value Tiers</option>
            <option value="Premium">Premium</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Standard">Standard</option>
          </select>
          <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full bg-slate-700 border border-slate-500 rounded-lg px-3 py-2 text-white focus:border-blue-400 focus:outline-none text-sm">
            <option value="">All Statuses</option>
            <option value="uncalled">Uncalled</option>
            <option value="called">Called</option>
            <option value="unanswered">Unanswered</option>
          </select>
          <select value={filterRating} onChange={(e) => setFilterRating(e.target.value)} className="w-full bg-slate-700 border border-slate-500 rounded-lg px-3 py-2 text-white focus:border-blue-400 focus:outline-none text-sm">
            <option value="">All Ratings</option>
            <option value="4.5">4.5+</option>
            <option value="4">4+</option>
            <option value="3">3+</option>
            <option value="2">2+</option>
          </select>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-slate-700">
            <thead className="bg-slate-800">
              <tr>
                <th scope="col" className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white sm:pl-6">Name</th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">Rating</th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">Value Tier</th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">City</th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">Phone / Website</th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">Status</th>
                <th scope="col" className="px-3 py-3.5 text-left text-sm font-semibold text-white">Notes</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-800 bg-slate-900/50">
              {loading ? (
                <tr><td colSpan="7" className="text-center py-4">Loading leads...</td></tr>
              ) : filteredAndSortedLeads.map((lead) => (
                <tr key={lead.id}>
                  <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-white sm:pl-6">
                    <a href={`https://www.google.com/maps/search/?api=1&query=Google&query_place_id=${lead.googlePlaceId}`} target="_blank" rel="noopener noreferrer" className="hover:text-blue-400">
                      {lead.name}
                    </a>
                  </td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-300">{lead.rating}</td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-300">{lead.valueTier || 'Standard'}</td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-300">{lead.city}</td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-300">
                    {lead.phone && <div><a href={`tel:${lead.phone}`} className="text-blue-400 hover:text-blue-300">{lead.phone}</a></div>}
                    {lead.website && <a href={lead.website} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:text-blue-300">Website</a>}
                  </td>
                  <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-300">
                    <select 
                      value={lead.status || 'uncalled'}
                      onChange={(e) => updateLeadStatus(lead.id, e.target.value)}
                      className="bg-slate-700 border-slate-600 rounded p-1 text-sm w-full"
                    >
                      <option value="uncalled">Uncalled</option>
                      <option value="called">Called</option>
                      <option value="unanswered">Unanswered</option>
                    </select>
                  </td>
                  <td className="px-3 py-4 text-sm text-gray-300">
                    <textarea 
                      defaultValue={lead.notes || ''} 
                      onBlur={(e) => updateLeadNotes(lead.id, e.target.value)} 
                      className="w-full bg-slate-700 border-slate-600 rounded p-1 text-sm"
                      rows={1}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </main>
  );
}

export default Dashboard;
